var arDrone = require('ar-drone');
var client = arDrone.createClient();
var arDroneConstants = require('ar-drone/lib/constants');
var fs = require('fs');
var df = require('dateformat');

function navdata_option_mask(c) {
  return 1 << c;
}

// From the SDK.
var navdata_options = (
    navdata_option_mask(arDroneConstants.options.DEMO) 
  | navdata_option_mask(arDroneConstants.options.VISION_DETECT)
  | navdata_option_mask(arDroneConstants.options.MAGNETO)
  | navdata_option_mask(arDroneConstants.options.WIFI)
  | navdata_option_mask(arDroneConstants.options.ALTITUDE)
);

// Connect and configure the drone
client.config('general:navdata_demo', true);
client.config('video:video_channel', 1);
client.config('detect:detect_type', 12);
client.config('general:navdata_options', navdata_options);

var dataStream = fs.createWriteStream("mission-" + df(new Date(), "yyyy-mm-dd_hh-MM-ss") + ".txt");
    	var n = 0;
    	
// Add a handler on navdata updates
client.on('navdata', function (d) {
    if (d.visionDetect) {
    	dataLog();
        console.log(d.demo.batteryPercentage);
        //console.log(d.demo);
        
    }
});

var dataLog = function() {
	client.on('navdata',function(d){
		if(d.demo){
    		var log = (n + ","+
    			   d.demo.altitude + "," +
    			   d.demo.altitudeMeters + "," +
    			   d.demo.velocity.x / 1000 + "," +//We want m/s instead of mm/s
    			   d.demo.velocity.y / 1000 + "," +//We want m/s instead of mm/s
    			   d.demo.velocity.z / 1000 );//We want m/s instead of mm/s
    		n = n + 1;
    		  log = log + "\n";
    		dataStream.write(log);
		}
	});

}

dataStream.write("n,demo,altitude,demo.altitudeMeters,vx,vy,vz"+"\n");
client.takeoff();
client.after(5000, function() {
    this.stop();
    this.land();
});
